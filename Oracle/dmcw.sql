--creating the required databases--
--expenses table to track expenses--
CREATE TABLE expenses (
  expense_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  category VARCHAR2(50) NOT NULL,
  amount NUMBER(10,2) NOT NULL,
  expense_date DATE NOT NULL,
  note VARCHAR2(200),
  sync_status VARCHAR2(10)
);
--budgets table to track budgets--
CREATE TABLE budgets (
  budget_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  category VARCHAR2(50),
  amount NUMBER(10,2),
  start_date DATE,
  end_date DATE,
  status VARCHAR2(20)
);

--savings table to track savings--
CREATE TABLE savings (
  saving_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  goal_name VARCHAR2(100),
  target_amount NUMBER(10,2),
  current_amount NUMBER(10,2),
  target_date DATE,
  status VARCHAR2(20)
);

--dummy data for confirmation --
INSERT INTO expenses (category, amount, expense_date, note, sync_status)
VALUES ('Food', 2500, TO_DATE('2025-10-28', 'YYYY-MM-DD'), 'Lunch', 'DONE');

INSERT INTO budgets (category, amount, start_date, end_date, status)
VALUES ('Food', 10000, TO_DATE('2025-10-01', 'YYYY-MM-DD'), TO_DATE('2025-10-31', 'YYYY-MM-DD'), 'ACTIVE');

INSERT INTO savings (goal_name, target_amount, current_amount, target_date, status)
VALUES ('New Phone', 80000, 20000, TO_DATE('2025-12-31', 'YYYY-MM-DD'), 'ACTIVE');

--------------------------------------------------------------------------------------------------------

--procedure to add expense--
CREATE OR REPLACE PROCEDURE add_expense(category IN VARCHAR2, amount NUMBER, expense_date DATE, note VARCHAR2)
AS
 failedToInsertException EXCEPTION;
 rowCount NUMBER;
BEGIN
    INSERT INTO expenses(category, amount, expense_date, note, sync_status) VALUES(category, amount, expense_date, note, 'PENDING');
    COMMIT;
    rowCount := SQL%ROWCOUNT;
    IF rowCount > 0 THEN
        RAISE failedToInsertException;
    END IF;
    DBMS_OUTPUT.PUT_LINE('Record Inserted Successfully');
EXCEPTION
WHEN failedToInsertException THEN
    DBMS_OUTPUT.PUT_LINE('Failed to Insert Record Check data given...!');
END;
/

--procedure to update expense--
CREATE OR REPLACE PROCEDURE update_expense(expenseId IN NUMBER, paraCategory IN VARCHAR2, paraAmount NUMBER, paraExpenseDte DATE, paraNote VARCHAR2)
AS
 failedToUpdateException EXCEPTION;
 rowCount NUMBER;
BEGIN
    UPDATE expenses SET category = paraCategory, amount = paraAmount, expense_date = paraExpenseDte, note = paraNote, sync_status = 'PENDING' WHERE expense_id = expenseId;
    COMMIT;
    rowCount := SQL%ROWCOUNT;
    IF rowCount > 0 THEN
        RAISE failedToUpdateException;
    END IF;
    DBMS_OUTPUT.PUT_LINE('Record Update Successfully');
EXCEPTION
WHEN failedToUpdateException THEN
    DBMS_OUTPUT.PUT_LINE('Failed to Update Record Check data given...!');
END;
/

--procedure to delete expense--
CREATE OR REPLACE PROCEDURE delete_expense(expenseId IN NUMBER)
AS
 failedToDeleteException EXCEPTION;
 rowCount NUMBER;
BEGIN
    DELETE FROM expenses WHERE expense_id = expenseId;
    COMMIT;
    rowCount := SQL%ROWCOUNT;
    IF rowCount > 0 THEN
        RAISE failedToDeleteException;
    END IF;
    DBMS_OUTPUT.PUT_LINE('Record Delete Successfully');
EXCEPTION
WHEN failedToDeleteException THEN
    DBMS_OUTPUT.PUT_LINE('Failed to Delete Record Check data given...!');
END;
/








